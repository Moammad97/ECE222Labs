


ARM Macro Assembler    Page 1 


    1 00000000         ;*------------------------------------------------------
                       -------------
    2 00000000         ;* Name:     lab_4_program.s 
    3 00000000         ;* Purpose:  A sample style for lab-4
    4 00000000         ;* Term:  Winter 2014
    5 00000000         ;*------------------------------------------------------
                       -------------
    6 00000000                 THUMB                        ; Declare THUMB ins
                                                            truction set 
    7 00000000                 AREA             My_code, CODE, READONLY
    8 00000000                 EXPORT           __MAIN      ; Label __MAIN is u
                                                            sed externally 
    9 00000000         ;EXPORT  EINT3_IRQHandler   ; The ISR will be known to t
                       he startup_LPC17xx.s program 
   10 00000000         
   11 00000000                 ENTRY
   12 00000000         
   13 00000000         __MAIN
   14 00000000 F8DF A18C       LDR              R10, =ISER0
   15 00000004 F8DA 1000       LDR              R1, [R10]
   16 00000008 F441 1100       ORR              R1, R1, #0x200000 ; Setting bit
                                                             21 of ISER0
   17 0000000C F8CA 1000       STR              R1, [R10]   ; Storing the right
                                                             value into ISER0 i
                                                            n order to enable E
                                                            INT3
   18 00000010 F04F 0601       MOV              R6, #0x1    ; Using R6 as a fla
                                                            g. if the button wa
                                                            sn't pressed, R6=1.
                                                             If the button is p
                                                            ressed, R6=0
   19 00000014         ; LDR  R10, =IO2IntClr 
   20 00000014         ; LDR  R1, [R10]
   21 00000014         ; ORR  R1, R1, #0x400
   22 00000014         ; STR  R1, [R10]
   23 00000014 F8DF A17C       LDR              R10, =IO2IntEnf ; Address to en
                                                            able interrupt on P
                                                            2.10 for falling ed
                                                            ge
   24 00000018 F8DA 1000       LDR              R1, [R10]
   25 0000001C F441 6180       ORR              R1, R1, #0x400 ; Setting bit 10
                                                            
   26 00000020 F8CA 1000       STR              R1, [R10]   ; Now the interrupt
                                                             on P2.10 for falli
                                                            ng edge is enabl
   27 00000024         ; The following lines are similar to previous labs.
   28 00000024         ; They just turn off all LEDs 
   29 00000024 F8DF A170       LDR              R10, =LED_BASE_ADR ; R10 is a  
                                                            pointer to the base
                                                             address for the LE
                                                            Ds
   30 00000028 F04F 4330       MOV              R3, #0xB0000000 ; Turn off thre
                                                            e LEDs on port 1  
   31 0000002C F8CA 3020       STR              R3, [r10, #0x20]
   32 00000030 F04F 037C       MOV              R3, #0x0000007C
   33 00000034 F8CA 3040       STR              R3, [R10, #0x40] ; Turn off fiv
                                                            e LEDs on port 2 
   34 00000038         
   35 00000038 F640 12C4       MOV              R2, #0x9C4  ; Putting 2500 into



ARM Macro Assembler    Page 2 


                                                             R2 to do the right
                                                             0.1mS delay (0.25s
                                                            )
   36 0000003C F04F 0304       MOV              R3, #0x00000004 ; Turn on 4 lef
                                                            t LEDs (Port 2)
   37 00000040 F8CA 3040       STR              R3, [R10, #0x40] ; Turn on 4 le
                                                            ft LEDs (Port 2)
   38 00000044         
   39 00000044         ; This line is very important in your main program
   40 00000044         ; Initializes R11 to a 16-bit non-zero value and NOTHING
                        else can write to R11 !!
   41 00000044 F64A 3BCD       MOV              R11, #0xABCD ; Init the random 
                                                            number generator wi
                                                            th a non-zero numbe
                                                            r
   42 00000048 F000 F858       BL               RNG
   43 0000004C F640 19C4       MOV              R9, #2500
   44 00000050 FBBB FBF9       UDIV             R11, R11, R9 ; The amount of ti
                                                            me/10000 = amount o
                                                            f seconds. the amou
                                                            nt of time*4= how m
                                                            any times call the 
                                                            dealy of 0.25s *4/1
                                                            0000 = /2500
   45 00000054 F000 F86E 
                       LOOP1   BL               DELAY
   46 00000058         ;FAZER UM LOAD EM R3
   47 00000058 F8DA 3020       LDR              R3, [R10, #0x20] ; Getting the 
                                                            value of port 1
   48 0000005C F083 4330       EOR              R3, R3, #0xB0000000 ; Turning o
                                                            n/off port 1
   49 00000060 F8CA 3020       STR              R3, [R10, #0x20]
   50 00000064 F8DA 3040       LDR              R3, [R10, #0x40] ; Getting the 
                                                            value of port 2
   51 00000068 F083 037C       EOR              R3, R3, #0x0000007C ; Turning o
                                                            n/off port 2
   52 0000006C F8CA 3040       STR              R3, [R10, #0x40]
   53 00000070 F1BB 0B01       SUBS             R11, R11, #1 ; Decrementing R11
                                                            
   54 00000074 D1EE            BNE              LOOP1       ; Checking R11
   55 00000076 F04F 4330       MOV              R3, #0xB0000000 ; Turn off thre
                                                            e LEDs on port 1  
   56 0000007A F8CA 3020       STR              R3, [r10, #0x20]
   57 0000007E F04F 037C       MOV              R3, #0x0000007C
   58 00000082 F8CA 3040       STR              R3, [R10, #0x40] ; Turn off fiv
                                                            e LEDs on port 2
   59 00000086 F04F 0400       MOV              R4, #0x00   ; R4 will be used a
                                                            s the time counter
   60 0000008A F04F 0500       MOV              R5, #0x00   ; R5 will be used t
                                                            o monitor when turn
                                                            ing on/off the LEDs
                                                            .
   61 0000008E F04F 0201       MOV              R2, #1      ; To do delay of 0.
                                                            1ms
   62 00000092 F000 F84F 
                       LOOP2   BL               DELAY
   63 00000096 2E00            CMP              R6, #0
   64 00000098 D016            BEQ              STOP_COUNT
   65 0000009A F104 0401       ADD              R4, R4, #1  ; Increment the tim



ARM Macro Assembler    Page 3 


                                                            e counter
   66 0000009E F105 0501       ADD              R5, R5, #1  ; Counter to monito
                                                            r when turn on/off 
                                                            the LEDS
   67 000000A2 F495 7F7A       TEQ              R5, #1000   ; To check interval
                                                            s of time of 1s
   68 000000A6 D1F4            BNE              LOOP2       ; If it didn't comp
                                                            lete 1000*0.1ms=0.1
                                                            s, go to loop2, oth
                                                            erwise, turn on/off
                                                             the LEDs
   69 000000A8 F04F 0500       MOV              R5, #0x00
   70 000000AC F8DA 3020       LDR              R3, [R10, #0x20] ; Getting the 
                                                            value of port 1
   71 000000B0 F083 4330       EOR              R3, #0xB0000000
   72 000000B4 F8CA 3020       STR              R3, [R10, #0x20]
   73 000000B8 F8DA 3040       LDR              R3, [R10, #0x40] ; Getting the 
                                                            value of port 2
   74 000000BC F083 037C       EOR              R3, #0x0000007C
   75 000000C0 F8CA 3040       STR              R3, [R10, #0x40]
   76 000000C4 F7FF FFE5       BL               LOOP2
   77 000000C8 F04F 0804 
                       STOP_COUNT
                               MOV              R8, #4      ; This register wil
                                                            l be used to check 
                                                            if I displayed all 
                                                            the 4 bytes
   78 000000CC 463C            MOV              R4, R7      ; Coping the result
                                                             of the counter int
                                                            o R4 to not lose it
                                                            s value (we cannot 
                                                            lose the value of R
                                                            7)
   79 000000CE F04F 0000 
                       NEXT_BYTE
                               MOV              R0, #0x00   ; R0 will be used t
                                                            o send the bits to 
                                                            the function DISPLA
                                                            Y_NUM
   80 000000D2 F04F 0108       MOV              R1, #8      ; R1 will be used t
                                                            o check how many bi
                                                            ts is in the regist
                                                            er that I will disp
                                                            lay (8 bits to pass
                                                             1 byte each time t
                                                            o the DISPLAY_NUM)
   81 000000D6 0864    TRANSFER_B
                               LSRS             R4, R4, #1  ; Get the least sig
                                                            nificant bit of R4.
                                                            .. 
   82 000000D8 EA4F 0030       RRX              R0, R0      ; ...and put it in 
                                                            the most significan
                                                            t bit of R0 (this w
                                                            ay I can send the l
                                                            east significant by
                                                            te first)
   83 000000DC 1E49            SUBS             R1, R1, #1  ; Check how many bi
                                                            ts I passed to R0
   84 000000DE DCFA            BGT              TRANSFER_B



ARM Macro Assembler    Page 4 


   85 000000E0 F000 F830       BL               DISPLAY_NUM
   86 000000E4 F644 6220       MOV              R2, #0x4E20 ; Putting 10000 int
                                                            o R2 to do the righ
                                                            t 0.1mS delay
   87 000000E8 F000 F824       BL               DELAY
   88 000000EC F1B8 0801       SUBS             R8, R8, #1  ; Checking how many
                                                             bytes I passed to 
                                                            the DISPLAY_NUM
   89 000000F0 DCED            BGT              NEXT_BYTE
   90 000000F2 F24C 3250       MOV              R2, #0xC350 ; Putting 50000 int
                                                            o R2 to do the righ
                                                            t 0.1mS delay
   91 000000F6 F000 F81D       BL               DELAY
   92 000000FA E7E5            B                STOP_COUNT
   93 000000FC         
   94 000000FC         
   95 000000FC         
   96 000000FC         ;
   97 000000FC         ; Your main program can appear here 
   98 000000FC         ;
   99 000000FC         
  100 000000FC         
  101 000000FC         
  102 000000FC         ;*------------------------------------------------------
                       ------------- 
  103 000000FC         ; Subroutine RNG ... Generates a pseudo-Random Number in
                        R11 
  104 000000FC         ;*------------------------------------------------------
                       ------------- 
  105 000000FC         ; R11 holds a random number as per the Linear feedback s
                       hift register (Fibonacci) on WikiPedia
  106 000000FC         ; R11 MUST be initialized to a non-zero 16-bit value at 
                       the start of the program
  107 000000FC         ; R11 can be read anywhere in the code but must only be 
                       written to by this subroutine
  108 000000FC         RNG
  109 000000FC B50E            STMFD            R13!,{R1-R3, R14} ; Random Numb
                                                            er Generator 
  110 000000FE F40B 4100       AND              R1, R11, #0x8000
  111 00000102 F40B 5200       AND              R2, R11, #0x2000
  112 00000106 EA4F 0282       LSL              R2, #2
  113 0000010A EA81 0302       EOR              R3, R1, R2
  114 0000010E F40B 5180       AND              R1, R11, #0x1000
  115 00000112 EA4F 01C1       LSL              R1, #3
  116 00000116 EA83 0301       EOR              R3, R3, R1
  117 0000011A F40B 6180       AND              R1, R11, #0x0400
  118 0000011E EA4F 1141       LSL              R1, #5
  119 00000122 EA83 0301       EOR              R3, R3, R1  ; The new bit to go
                                                             into the LSB is pr
                                                            esent
  120 00000126 EA4F 33D3       LSR              R3, #15
  121 0000012A EA4F 0B4B       LSL              R11, #1
  122 0000012E EA4B 0B03       ORR              R11, R11, R3
  123 00000132 BD0E            LDMFD            R13!,{R1-R3, R15}
  124 00000134         
  125 00000134         ;*------------------------------------------------------
                       ------------- 
  126 00000134         ; Subroutine DELAY ... Causes a delay of 1ms * Rn times
  127 00000134         ;*------------------------------------------------------



ARM Macro Assembler    Page 5 


                       ------------- 
  128 00000134         ;   aim for better than 10% accuracy 
  129 00000134 B50C    DELAY   STMFD            R13!,{R2, R3, R14}
  130 00000136 F04F 0383       MOV              R3, #0x83   ; decrement this va
                                                            lue to have a delay
                                                             of 0.1mS 
  131 0000013A FB03 F302       MUL              R3, R3, R2  ; R2 sets the amoun
                                                            t of delay I wanna 
                                                            do, since I know th
                                                            at R3 can generate 
                                                            a delay of 0.1mS
  132 0000013E 1E5B    LOOP_D  SUBS             R3, R3, #1  ; decrement counter
                                                             R3
  133 00000140 D1FD            BNE              LOOP_D
  134 00000142 BD0C            LDMFD            R13!,{R2, R3, R15}
  135 00000144         
  136 00000144         
  137 00000144         ;*------------------------------------------------------
                       ------------- 
  138 00000144         ;Interrupt Service Routine (ISR) for EINT3_IRQHandler 
  139 00000144         ;*------------------------------------------------------
                       ------------- 
  140 00000144         ; This ISR handles the interrupt triggered when the INT0
                        push-button is pressed 
  141 00000144         ; with the assumption that the interrupt activation is d
                       one in the main program
  142 00000144         ; EINT3_IRQHandler  PROC 
  143 00000144         ; ;STMFD   ...     ; Use this command if you need it  
  144 00000144         ; ;LDMFD   ...     ; Use this command if you used STMFD 
                       (otherwise use BX LR)
  145 00000144         ; STMFD R13!,{R1, R10, R14}
  146 00000144         ; MOV  R6, #0x00   ; Cleaning the flag. if R6=0, the but
                       ton was pressed.
  147 00000144         ; LDR  R10, =IO2IntEnf
  148 00000144         ; LDR  R1, [R10]
  149 00000144         ; EOR  R1, R1, #0x400
  150 00000144         ; STR  R1, [R10]
  151 00000144         ; LDMFD R13!,{R1, R10, R15}
  152 00000144         ; ENDP
  153 00000144         
  154 00000144                 ALIGN
  155 00000144         
  156 00000144         ;*------------------------------------------------------
                       ------------- 
  157 00000144         ; Routine to display the one byte trhough the LEDs 
  158 00000144         ;*------------------------------------------------------
                       ------------- 
  159 00000144         ; GUIDE: Display the number in R3 onto the 8 LEDs
  160 00000144         ; MARINA: Display the number in R4 onto the 8 LEDs
  161 00000144 E92D 5FFF 
                       DISPLAY_NUM
                               STMFD            R13!,{R0 - R12, R14}
  162 00000148         ; Usefull commaands:  RBIT (reverse bits), BFC (bit fiel
                       d clear), LSR & LSL to shift bits left and right, ORR & 
                       AND and EOR for bitwise operations
  163 00000148 F04F 31FF       MOV              R1, #0xFFFFFFFF ; It will be us
                                                            ed to invert the bi
                                                            ts  
  164 0000014C F04F 0505       MOV              R5, #5      ; It will be used t



ARM Macro Assembler    Page 6 


                                                            o check the number 
                                                            of bits I passed to
                                                             another register
  165 00000150 F04F 0600       MOV              R6, #0x00   ; It will be used t
                                                            o store the right v
                                                            alue to turn on the
                                                             required LEDS of p
                                                            ort P1
  166 00000154 F04F 0700       MOV              R7, #0x00   ; It will be used t
                                                            o store the right v
                                                            alue to turn on the
                                                             required LEDS of p
                                                            ort P2
  167 00000158 EA80 0001       EOR              R0, R0, R1  ; Inverting the bit
                                                            s: bits 0 turn into
                                                             1 and bits 1 turn 
                                                            into 0 (because the
                                                             led turns on with 
                                                            0, not with 1)
  168 0000015C FA90 F0A0       RBIT             R0, R0      ; Invert the order 
                                                            of the bits 
  169 00000160 0840            LSRS             R0, R0, #1  ; Putting the bits 
                                                            5, 6, 7 into bits 2
                                                            8, 29, 31 to turn o
                                                            n the LEDS. (actual
                                                            ly it's the bit 7 t
                                                            hat was in R4. The 
                                                            bit 7 of R4 become 
                                                            the bit 32 in R0 an
                                                            d then bit 1 after 
                                                            the RBIT)
  170 00000162 EA4F 0636       RRX              R6, R6      ; 
  171 00000166 0840            LSRS             R0, R0, #1  ;
  172 00000168 EA4F 0636       RRX              R6, R6      ;
  173 0000016C EA4F 0656       LSR              R6, R6, #1  ; Putting a 0 in th
                                                            e bit 30. It was ne
                                                            cessary to set corr
                                                            ectly the data to p
                                                            ut in the LED addre
                                                            ss
  174 00000170 0840            LSRS             R0, R0, #1  ; Putting the bits 
                                                            5, 6, 7 into bits 2
                                                            8, 29, 31 to turn o
                                                            n the LEDS
  175 00000172 EA4F 0636       RRX              R6, R6      ; Now R6 has the ri
                                                            ght value to turn o
                                                            n LEDS P1.28, P1.29
                                                             and P1.31
  176 00000176 0840    AGAIN   LSRS             R0, R0, #1  ; Putting the bits 
                                                            4,3,2,1,0 into into
                                                             R7 to turn on the 
                                                            LEDS P2.2, P2.3, P2
                                                            .4, P2.5, P2.6  (Ac
                                                            tually these bits h
                                                            ad these position i
                                                            n the register R4. 
                                                            After the bit 0 bec
                                                            ome the bit 25 in R
                                                            0 and then bit 7 af



ARM Macro Assembler    Page 7 


                                                            ter the RBIT)
  177 00000178 EA4F 0737       RRX              R7, R7
  178 0000017C 1E6D            SUBS             R5, R5, #1  ; Checking how many
                                                             bits I put in R7
  179 0000017E DCFA            BGT              AGAIN
  180 00000180 EA4F 6757       LSR              R7, R7, #25 ; Shifting 25 times
                                                            . This way the bits
                                                             that I moved to R7
                                                             can be in the righ
                                                            t bit position (fir
                                                            st bit that I moved
                                                             will be in the bit
                                                             2). 
  181 00000184 F8C9 6020       STR              R6, [R9, #0x20] ; Turn off thre
                                                            e LEDs on port 1  
  182 00000188 F8C9 7040       STR              R7, [R9, #0x40] ; Turn off five
                                                             LEDs on port 2
  183 0000018C E8BD 9FFF       LDMFD            R13!,{R0 - R12, R15}
  184 00000190         
  185 00000190         ;*------------------------------------------------------
                       -------------
  186 00000190         ; Below is a list of useful registers with their respect
                       ive memory addresses.
  187 00000190         ;*------------------------------------------------------
                       ------------- 
  188 00000190 2009C000 
                       LED_BASE_ADR
                               EQU              0x2009c000  ; Base address of t
                                                            he memory that cont
                                                            rols the LEDs 
  189 00000190 4002C00C 
                       PINSEL3 EQU              0x4002C00C  ; Pin Select Regist
                                                            er 3 for P1[31:16]
  190 00000190 4002C010 
                       PINSEL4 EQU              0x4002C010  ; Pin Select Regist
                                                            er 4 for P2[15:0]
  191 00000190 2009C020 
                       FIO1DIR EQU              0x2009C020  ; Fast Input Output
                                                             Direction Register
                                                             for Port 1 
  192 00000190 2009C040 
                       FIO2DIR EQU              0x2009C040  ; Fast Input Output
                                                             Direction Register
                                                             for Port 2 
  193 00000190 2009C038 
                       FIO1SET EQU              0x2009C038  ; Fast Input Output
                                                             Set Register for P
                                                            ort 1 
  194 00000190 2009C058 
                       FIO2SET EQU              0x2009C058  ; Fast Input Output
                                                             Set Register for P
                                                            ort 2 
  195 00000190 2009C03C 
                       FIO1CLR EQU              0x2009C03C  ; Fast Input Output
                                                             Clear Register for
                                                             Port 1 
  196 00000190 2009C05C 
                       FIO2CLR EQU              0x2009C05C  ; Fast Input Output
                                                             Clear Register for



ARM Macro Assembler    Page 8 


                                                             Port 2 
  197 00000190 400280B4 
                       IO2IntEnf
                               EQU              0x400280B4  ; GPIO Interrupt En
                                                            able for port 2 Fal
                                                            ling Edge 
  198 00000190 E000E100 
                       ISER0   EQU              0xE000E100  ; Interrupt Set-Ena
                                                            ble Register 0 
  199 00000190 400280AC 
                       IO2IntClr
                               EQU              0x400280AC
  200 00000190         
  201 00000190                 ALIGN
  202 00000190                 END
              E000E100 
              400280B4 
              2009C000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=Lab4_tem
plate.d -oLab4_template.o -IC:\Software\Keil\ARM\RV31\INC -IC:\Software\Keil\AR
M\CMSIS\Include -IC:\Software\Keil\ARM\Inc\NXP\LPC17xx --list=Lab4_template.lst
 Lab4_template.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AGAIN 00000176

Symbol: AGAIN
   Definitions
      At line 176 in file Lab4_template.s
   Uses
      At line 179 in file Lab4_template.s
Comment: AGAIN used once
DELAY 00000134

Symbol: DELAY
   Definitions
      At line 129 in file Lab4_template.s
   Uses
      At line 45 in file Lab4_template.s
      At line 62 in file Lab4_template.s
      At line 87 in file Lab4_template.s
      At line 91 in file Lab4_template.s

DISPLAY_NUM 00000144

Symbol: DISPLAY_NUM
   Definitions
      At line 161 in file Lab4_template.s
   Uses
      At line 85 in file Lab4_template.s
Comment: DISPLAY_NUM used once
LOOP1 00000054

Symbol: LOOP1
   Definitions
      At line 45 in file Lab4_template.s
   Uses
      At line 54 in file Lab4_template.s
Comment: LOOP1 used once
LOOP2 00000092

Symbol: LOOP2
   Definitions
      At line 62 in file Lab4_template.s
   Uses
      At line 68 in file Lab4_template.s
      At line 76 in file Lab4_template.s

LOOP_D 0000013E

Symbol: LOOP_D
   Definitions
      At line 132 in file Lab4_template.s
   Uses
      At line 133 in file Lab4_template.s
Comment: LOOP_D used once
My_code 00000000

Symbol: My_code
   Definitions
      At line 7 in file Lab4_template.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: My_code unused
NEXT_BYTE 000000CE

Symbol: NEXT_BYTE
   Definitions
      At line 79 in file Lab4_template.s
   Uses
      At line 89 in file Lab4_template.s
Comment: NEXT_BYTE used once
RNG 000000FC

Symbol: RNG
   Definitions
      At line 108 in file Lab4_template.s
   Uses
      At line 42 in file Lab4_template.s
Comment: RNG used once
STOP_COUNT 000000C8

Symbol: STOP_COUNT
   Definitions
      At line 77 in file Lab4_template.s
   Uses
      At line 64 in file Lab4_template.s
      At line 92 in file Lab4_template.s

TRANSFER_B 000000D6

Symbol: TRANSFER_B
   Definitions
      At line 81 in file Lab4_template.s
   Uses
      At line 84 in file Lab4_template.s
Comment: TRANSFER_B used once
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 13 in file Lab4_template.s
   Uses
      At line 8 in file Lab4_template.s
Comment: __MAIN used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FIO1CLR 2009C03C

Symbol: FIO1CLR
   Definitions
      At line 195 in file Lab4_template.s
   Uses
      None
Comment: FIO1CLR unused
FIO1DIR 2009C020

Symbol: FIO1DIR
   Definitions
      At line 191 in file Lab4_template.s
   Uses
      None
Comment: FIO1DIR unused
FIO1SET 2009C038

Symbol: FIO1SET
   Definitions
      At line 193 in file Lab4_template.s
   Uses
      None
Comment: FIO1SET unused
FIO2CLR 2009C05C

Symbol: FIO2CLR
   Definitions
      At line 196 in file Lab4_template.s
   Uses
      None
Comment: FIO2CLR unused
FIO2DIR 2009C040

Symbol: FIO2DIR
   Definitions
      At line 192 in file Lab4_template.s
   Uses
      None
Comment: FIO2DIR unused
FIO2SET 2009C058

Symbol: FIO2SET
   Definitions
      At line 194 in file Lab4_template.s
   Uses
      None
Comment: FIO2SET unused
IO2IntClr 400280AC

Symbol: IO2IntClr
   Definitions
      At line 199 in file Lab4_template.s
   Uses
      None
Comment: IO2IntClr unused
IO2IntEnf 400280B4

Symbol: IO2IntEnf



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 197 in file Lab4_template.s
   Uses
      At line 23 in file Lab4_template.s
Comment: IO2IntEnf used once
ISER0 E000E100

Symbol: ISER0
   Definitions
      At line 198 in file Lab4_template.s
   Uses
      At line 14 in file Lab4_template.s
Comment: ISER0 used once
LED_BASE_ADR 2009C000

Symbol: LED_BASE_ADR
   Definitions
      At line 188 in file Lab4_template.s
   Uses
      At line 29 in file Lab4_template.s
Comment: LED_BASE_ADR used once
PINSEL3 4002C00C

Symbol: PINSEL3
   Definitions
      At line 189 in file Lab4_template.s
   Uses
      None
Comment: PINSEL3 unused
PINSEL4 4002C010

Symbol: PINSEL4
   Definitions
      At line 190 in file Lab4_template.s
   Uses
      None
Comment: PINSEL4 unused
12 symbols
356 symbols in table
