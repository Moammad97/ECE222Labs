


ARM Macro Assembler    Page 1 


    1 00000000         ; ECE-222 Lab ... Winter 2014 term 
    2 00000000         ; Lab 3 sample code 
    3 00000000                 THUMB                        ; Thumb instruction
                                                             set 
    4 00000000                 AREA             My_code, CODE, READONLY
    5 00000000                 EXPORT           __MAIN
    6 00000000                 ENTRY
    7 00000000         __MAIN
    8 00000000         
    9 00000000         ; The following lines are similar to Lab-1 but use a def
                       ined address to make it easier.
   10 00000000         ; They just turn off all LEDs 
   11 00000000 F8DF 910C       LDR              R9, =LED_BASE_ADR ; R9 is a per
                                                            menant pointer to t
                                                            he base address for
                                                             the LEDs, offset o
                                                            f 0x20 and 0x40 for
                                                             the ports
   12 00000004 F04F 4330       MOV              R3, #0xB0000000
   13 00000008 F8C9 3020       STR              R3, [R9, #0x20] ; Turn off thre
                                                            e LEDs on port 1  
   14 0000000C F04F 037C       MOV              R3, #0x0000007C
   15 00000010 F8C9 3040       STR              R3, [R9, #0x40] ; Turn off five
                                                             LEDs on port 2 
   16 00000014         ; This line initializes R10 to a 16-bit non-zero value. 
                       
   17 00000014 F64A 3ACD       MOV              R10, #0xABCD ; Seed for the ran
                                                            dom number generato
                                                            r 
   18 00000018 F000 F856       BL               RandomNum   ; Generate the rand
                                                            om number
   19 0000001C 4652            MOV              R2, R10     ; Coping the value 
                                                            from R10 to R2 to d
                                                            o the right amount 
                                                            of delays; I have t
                                                            o copy to R2 becaus
                                                            e I will use this r
                                                            egister to set the 
                                                            amount of delays in
                                                             other parts of the
                                                             code
   20 0000001E F000 F86F       BL               DELAY       ; Calls DELAY to tu
                                                            rn on the LED after
                                                             that random amount
                                                             of time
   21 00000022 F04F 4320       MOV              R3, #0xA0000000 ; Value to turn
                                                             on LED P2.29
   22 00000026 F8C9 3020       STR              R3, [R9, #0x20] 
                                                            ; Turn on LED P2.29
                                                            
   23 0000002A F04F 0700       MOV              R7, #0x0000 ; Cleaning R7 to us
                                                            e it as a counter. 
                                                            (It would be the ti
                                                            me counter, will re
                                                            gister how much tim
                                                            e the person took t
                                                            o press the button)
                                                            
   24 0000002E F04F 0201       MOV              R2, #0x0001 ; Putting 01 into R



ARM Macro Assembler    Page 2 


                                                            2 to do the right 0
                                                            .1mS delay (each ti
                                                            me I do the loop, I
                                                             have to increment 
                                                            0.1mS. So, R2(01) i
                                                            s the amount of tim
                                                            es I have to do the
                                                             DELAY)
   25 00000032 4D38            LDR              R5, =FIO2PIN1 ; FIO2PIN1 = 0x20
                                                            09 C055 Putting the
                                                             memory location in
                                                            to R5 monitor the b
                                                            utton (I have to 
   26 00000034 F107 0701 
                       LOOP_INC
                               ADD              R7, R7, #1  ; Increment the cou
                                                            nter
   27 00000038 F000 F862       BL               DELAY
   28 0000003C         ; Monitor the status of INTO push button
   29 0000003C 682E            LDR              R6, [R5, #0x0] ; Coping the val
                                                            ue of the status of
                                                             the button to R6
   30 0000003E F04F 0B04       MOV              R11, #0x00000004 ;TESTTTT DELET
                                                            E IT AFTER
   31 00000042 EA16 060B       ANDS             R6, R6, R11 ; Checking the bit 
                                                            2 (bit 2 = P2.10)
   32 00000046         ; BEQ   loop  ; If the result is 0, the bit 2 is 0, so t
                       he button was pressed
   33 00000046 D1F5            BNE              LOOP_INC    ; Go back to the be
                                                            gin of the loop
   34 00000048 F04F 0804 
                       loop    MOV              R8, #4
   35 0000004C 463C            MOV              R4, R7      ;loop to show the r
                                                            esult again
   36 0000004E F04F 0000 
                       NEXT_BYTE
                               MOV              R0, #0x00
   37 00000052 F04F 0108       MOV              R1, #8
   38 00000056 0864    TRANSFER_BYTE
                               LSRS             R4, R4, #1
   39 00000058 EA4F 0030       RRX              R0, R0
   40 0000005C 1E49            SUBS             R1, R1, #1
   41 0000005E DCFA            BGT              TRANSFER_BYTE
   42 00000060 F000 F80C       BL               DISPLAY_NUM
   43 00000064 F644 6220       MOV              R2, #0x4E20 ; Putting 10000 int
                                                            o R2 to do the righ
                                                            t 0.1mS delay
   44 00000068 F000 F84A       BL               DELAY
   45 0000006C F1B8 0801       SUBS             R8, R8, #1
   46 00000070 DCED            BGT              NEXT_BYTE
   47 00000072 F24C 3250       MOV              R2, #0xC350 ; Putting 50000 int
                                                            o R2 to do the righ
                                                            t 0.1mS delay
   48 00000076 F000 F843       BL               DELAY
   49 0000007A E7E5            B                loop
   50 0000007C         
   51 0000007C         ;
   52 0000007C         ; GUIDE: Display the number in R3 onto the 8 LEDs
   53 0000007C         ; MARINA: Display the number in R4 onto the 8 LEDs



ARM Macro Assembler    Page 3 


   54 0000007C E92D 5FFF 
                       DISPLAY_NUM
                               STMFD            R13!,{R0 - R12, R14}
   55 00000080         ; Usefull commaands:  RBIT (reverse bits), BFC (bit fiel
                       d clear), LSR & LSL to shift bits left and right, ORR & 
                       AND and EOR for bitwise operations
   56 00000080 F04F 31FF       MOV              R1, #0xFFFFFFFF
   57 00000084 F04F 0505       MOV              R5, #5
   58 00000088 F04F 0600       MOV              R6, #0x00
   59 0000008C F04F 0700       MOV              R7, #0x00
   60 00000090 EA80 0001       EOR              R0, R0, R1  ; Inverting the bit
                                                            s: bits 0 turn into
                                                             1 and bits 1 turn 
                                                            into 0 (because the
                                                             led turns on with 
                                                            0, not with 1)
   61 00000094         ;LSR   R0, R0, #24   ; 'Deleting' the unnecessary bits
   62 00000094 FA90 F0A0       RBIT             R0, R0
   63 00000098 0840            LSRS             R0, R0, #1  ; Putting the bits 
                                                            5, 6, 7 into bits 2
                                                            8, 29, 31 to turn o
                                                            n the LEDS
   64 0000009A EA4F 0636       RRX              R6, R6      ;
   65 0000009E 0840            LSRS             R0, R0, #1  ;
   66 000000A0 EA4F 0636       RRX              R6, R6      ;
   67 000000A4 EA4F 0656       LSR              R6, R6, #1  ;
   68 000000A8 0840            LSRS             R0, R0, #1  ; Putting the bits 
                                                            5, 6, 7 into bits 2
                                                            8, 29, 31 to turn o
                                                            n the LEDS
   69 000000AA EA4F 0636       RRX              R6, R6      ; Now R6 has the ri
                                                            ght value to turn o
                                                            n LEDS P1.28, P1.29
                                                             and P1.31
   70 000000AE 0840    AGAIN   LSRS             R0, R0, #1  ; Putting the bits 
                                                            1,3,2,1,0 into into
                                                             R7 to turn on the 
                                                            LEDS P2.2, P2.3, P2
                                                            .4, P2.5, P2.6
   71 000000B0 EA4F 0737       RRX              R7, R7
   72 000000B4 1E6D            SUBS             R5, R5, #1
   73 000000B6 DCFA            BGT              AGAIN
   74 000000B8 EA4F 6757       LSR              R7, R7, #25
   75 000000BC F8C9 6020       STR              R6, [R9, #0x20] ; Turn off thre
                                                            e LEDs on port 1  
   76 000000C0 F8C9 7040       STR              R7, [R9, #0x40] ; Turn off five
                                                             LEDs on port 2
   77 000000C4 E8BD 9FFF       LDMFD            R13!,{R0 - R12, R15}
   78 000000C8         
   79 000000C8         ; R10 holds a random number via a pseudo-random sequence
                        as per the Linear feedback shift register (Fibonacci) o
                       n WikiPedia
   80 000000C8         ; R10 MUST be initialized to a non-zero 16-bit value at 
                       the start of the program
   81 000000C8         ; R10 can be read anywhere in the code but must only be 
                       written to by this subroutine
   82 000000C8 B50E    RandomNum
                               STMFD            R13!,{R1, R2, R3, R14}
   83 000000CA         



ARM Macro Assembler    Page 4 


   84 000000CA F40A 4100       AND              R1, R10, #0x8000
   85 000000CE F40A 5200       AND              R2, R10, #0x2000
   86 000000D2 EA4F 0282       LSL              R2, #2
   87 000000D6 EA81 0302       EOR              R3, R1, R2
   88 000000DA F40A 5180       AND              R1, R10, #0x1000
   89 000000DE EA4F 01C1       LSL              R1, #3
   90 000000E2 EA83 0301       EOR              R3, R3, R1
   91 000000E6 F40A 6180       AND              R1, R10, #0x0400
   92 000000EA EA4F 1141       LSL              R1, #5
   93 000000EE EA83 0301       EOR              R3, R3, R1  ; the new bit to go
                                                             into the LSB is pr
                                                            esent
   94 000000F2 EA4F 33D3       LSR              R3, #15
   95 000000F6 EA4F 0A4A       LSL              R10, #1
   96 000000FA EA4A 0A03       ORR              R10, R10, R3
   97 000000FE         
   98 000000FE BD0E            LDMFD            R13!,{R1, R2, R3, R15}
   99 00000100         
  100 00000100         ;
  101 00000100         ;  Delay 0.1ms (100us) * R0 times
  102 00000100         ;   aim for better than 10% accuracy
  103 00000100         ; code to generate a delay of 0.1mS * R0 times
  104 00000100 B50C    DELAY   STMFD            R13!,{R2, R3, R14}
  105 00000102 F04F 0383       MOV              R3, #0x83   ; decrement this va
                                                            lue to have a delay
                                                             of 0.1mS   D1   10
                                                            .94  0x83FF
  106 00000106         ;tirar depois
  107 00000106         ;MOV   R2, #0x186A
  108 00000106         ;LSL   R2, R2, #4
  109 00000106 FB03 F302       MUL              R3, R3, R2
  110 0000010A 1E5B    LOOP1   SUBS             R3, R3, #1  ; decrement counter
                                                             R3
  111 0000010C D1FD            BNE              LOOP1
  112 0000010E BD0C            LDMFD            R13!,{R2, R3, R15}
  113 00000110         
  114 00000110                 ALIGN
  115 00000110         
  116 00000110 2009C000 
                       LED_BASE_ADR
                               EQU              0x2009C000  ; Base address of t
                                                            he memory that cont
                                                            rols the LEDs 
  117 00000110 2009C055 
                       FIO2PIN1
                               EQU              0x2009C055  ; FIO2PIN1 = 0x2009
                                                             C055
  118 00000110 4002C00C 
                       PINSEL3 EQU              0x4002C00c  ; Address of Pin Se
                                                            lect Register 3 for
                                                             P1[31:16]
  119 00000110 4002C010 
                       PINSEL4 EQU              0x4002C010  ; Address of Pin Se
                                                            lect Register 4 for
                                                             P2[15:0]
  120 00000110         ; Usefull GPIO Registers
  121 00000110         ; FIODIR  - register to set individual pins as input or 
                       output
  122 00000110         ; FIOPIN  - register to read and write pins



ARM Macro Assembler    Page 5 


  123 00000110         ; FIOSET  - register to set I/O pins to 1 by writing a 1
                       
  124 00000110         ; FIOCLR  - register to clr I/O pins to 0 by writing a 1
                       
  125 00000110         
  126 00000110                 END
              2009C000 
              2009C055 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\Lab3_t
emplate.d -o.\Lab3_template.o -IC:\Software\Keil\ARM\RV31\INC -IC:\Software\Kei
l\ARM\CMSIS\Include -IC:\Software\Keil\ARM\Inc\NXP\LPC17xx --list=.\Lab3_templa
te.lst N:\ECE222_LAB3\Lab3_template.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AGAIN 000000AE

Symbol: AGAIN
   Definitions
      At line 70 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 73 in file N:\ECE222_LAB3\Lab3_template.s
Comment: AGAIN used once
DELAY 00000100

Symbol: DELAY
   Definitions
      At line 104 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 20 in file N:\ECE222_LAB3\Lab3_template.s
      At line 27 in file N:\ECE222_LAB3\Lab3_template.s
      At line 44 in file N:\ECE222_LAB3\Lab3_template.s
      At line 48 in file N:\ECE222_LAB3\Lab3_template.s

DISPLAY_NUM 0000007C

Symbol: DISPLAY_NUM
   Definitions
      At line 54 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 42 in file N:\ECE222_LAB3\Lab3_template.s
Comment: DISPLAY_NUM used once
LOOP1 0000010A

Symbol: LOOP1
   Definitions
      At line 110 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 111 in file N:\ECE222_LAB3\Lab3_template.s
Comment: LOOP1 used once
LOOP_INC 00000034

Symbol: LOOP_INC
   Definitions
      At line 26 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 33 in file N:\ECE222_LAB3\Lab3_template.s
Comment: LOOP_INC used once
My_code 00000000

Symbol: My_code
   Definitions
      At line 4 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      None
Comment: My_code unused
NEXT_BYTE 0000004E

Symbol: NEXT_BYTE
   Definitions
      At line 36 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 46 in file N:\ECE222_LAB3\Lab3_template.s
Comment: NEXT_BYTE used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

RandomNum 000000C8

Symbol: RandomNum
   Definitions
      At line 82 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 18 in file N:\ECE222_LAB3\Lab3_template.s
Comment: RandomNum used once
TRANSFER_BYTE 00000056

Symbol: TRANSFER_BYTE
   Definitions
      At line 38 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 41 in file N:\ECE222_LAB3\Lab3_template.s
Comment: TRANSFER_BYTE used once
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 7 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 5 in file N:\ECE222_LAB3\Lab3_template.s
Comment: __MAIN used once
loop 00000048

Symbol: loop
   Definitions
      At line 34 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 49 in file N:\ECE222_LAB3\Lab3_template.s
Comment: loop used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FIO2PIN1 2009C055

Symbol: FIO2PIN1
   Definitions
      At line 117 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 25 in file N:\ECE222_LAB3\Lab3_template.s
Comment: FIO2PIN1 used once
LED_BASE_ADR 2009C000

Symbol: LED_BASE_ADR
   Definitions
      At line 116 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      At line 11 in file N:\ECE222_LAB3\Lab3_template.s
Comment: LED_BASE_ADR used once
PINSEL3 4002C00C

Symbol: PINSEL3
   Definitions
      At line 118 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      None
Comment: PINSEL3 unused
PINSEL4 4002C010

Symbol: PINSEL4
   Definitions
      At line 119 in file N:\ECE222_LAB3\Lab3_template.s
   Uses
      None
Comment: PINSEL4 unused
4 symbols
347 symbols in table
